generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model categorias {
  id                                                         String              @id @default(uuid())
  name                                                       String
  created_at            DateTime               @default(now())
  updated_at            DateTime

  //relaciones
  productos productos[]
  root   categoriasclosure[] @relation("roots")
  padre  categoriasclosure[] @relation("padres")
  hijo categoriasclosure[] @relation("hijos")
}



model categoriasclosure {
  id                                                  String                 @id @default(uuid())
  root                                                String
  padre                                               String
  hijo                                                String
  depth                                               Int

  //relaciones
  categorias_root   categorias @relation("roots", fields: [root], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categorias_padre categorias @relation("padres", fields: [padre], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categorias_hijo categorias @relation("hijos", fields: [hijo], references: [id], onDelete: NoAction, onUpdate: NoAction)
}



model productos {
  id                    String              @id @default(uuid())
  name                  String
  description           String
  marca                 String
  codigo                String              @unique
  ean_code              String?             @unique
  quantity              Float
  tax                   Float               @default(0.0)
  promo                 Boolean
  new                   Boolean
  active                Boolean
  created_at            DateTime            @default(now())
  updated_at            DateTime  
  categoria_id          String
  categoria categorias @relation(fields: [categoria_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  images                image[]
  prices                 price[]
}

model image {
  id            String   @id
  name          String
  public_id     String
  secure_url    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  product_id    String
  product       productos  @relation(fields: [product_id], references: [id])
}

model price {
  id        String   @id
  price1    Float
  price2    Float?
  price3    Float?
  price4    Float?
  price5    Float?
  price6    Float?
  created_at DateTime @default(now())
  updated_at DateTime
  product_id String
  product   productos  @relation(fields: [product_id], references: [id])
}


//Modelos para la autenticacion

model user {
  id           String    @id @unique
  email     String
  auth_session user_session[]
  key          user_key[]
}

model user_session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           user   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model user_key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            user    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}